name: Build on Windows

on:
  push:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      PYTHON_UNBUFFERED: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Python dependencies
        working-directory: ./backend
        run: pip install -r requirements.txt

      - name: Run PyInstaller
        working-directory: ./backend
        run: |
          pyinstaller --onefile --name script --distpath ../frontend/resources src/main.py

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22.x"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          npm ci

      - name: Create resources/downloads folder
        run: New-Item -ItemType Directory -Force -Path frontend\resources\downloads

      - name: Build Electron (Windows)
        working-directory: ./frontend
        run: |
          npm run build --win

      - name: Create ZIP file
        run: zip -r dist.zip frontend/dist

      - name: Create Github Release
        if: always()
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version_name.outputs.version }}
          release_name: v${{ steps.extract_version_name.outputs.version }}
          body: ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip
